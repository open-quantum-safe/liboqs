version: 2.1

orbs:
  win: circleci/windows@2.2.0

# CircleCI doesn't handle large file sets properly for local builds
# https://github.com/CircleCI-Public/circleci-cli/issues/281#issuecomment-472808051
localCheckout: &localCheckout
  run: |-
    PROJECT_PATH=$(cd ${CIRCLE_WORKING_DIRECTORY}; pwd)
    mkdir -p ${PROJECT_PATH}
    cd /tmp/_circleci_local_build_repo
    git ls-files -z | xargs -0 -s 2090860 tar -c | tar -x -C ${PROJECT_PATH}
    cp -a /tmp/_circleci_local_build_repo/.git ${PROJECT_PATH}

.oqsjob: &oqsjob
  docker:
    - image: ${IMAGE}
  steps:
    - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
    - run:
        name: Configure
        command: scripts/git_no_checkin_in_last_day.sh || (mkdir build && cd build && source ~/.bashrc && cmake -GNinja ${CONFIGURE_ARGS} ..)
    - run:
        name: Build
        command: ../scripts/git_no_checkin_in_last_day.sh || ninja
        working_directory: build
    - run:
        name: Run tests
        command: ../scripts/git_no_checkin_in_last_day.sh || ninja run_tests
        working_directory: build
    - store_test_results: # Note that this command will fail when running CircleCI locally, that is expected behaviour
        path: build/test-results
    - store_artifacts:
        path: build/test-results

.emulatedjob: &emulatedjob
  machine:
    image: ubuntu-1604:201903-01
  steps:
    - checkout
    - run:
        name: Install the emulation handlers
        command: docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - run:
        name: Run the tests in a container
        command: |
          scripts/git_no_checkin_in_last_day.sh ||
          docker run -e SKIP_TESTS=style --rm -v `pwd`:`pwd` -w `pwd` openquantumsafe/ci-debian-buster-${ARCH}:latest /bin/bash -c "
          uname -a &&
          file /bin/ls &&
          mkdir build &&
          (cd build &&
          cmake -GNinja ${CONFIGURE_ARGS} .. &&
          ninja &&
          ninja run_tests)
          "
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: build/test-results

.winjob: &winjob
    executor:
      name: win/default
    steps:
        - checkout
        - run:
           name: Install ninja
           command: $ProgressPreference="SilentlyContinue" ; Invoke-RestMethod -Uri https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip -Method Get -OutFile ninja.zip; Expand-Archive ninja.zip
           shell: powershell.exe
        - run:
            name: Install dependencies
            command: |
              scripts/git_no_checkin_in_last_day.sh || (
              pip install pytest pytest-xdist
              )
            shell: bash.exe
        - run:
            name: Configure & Build
            command: PATH=C:\Users\circleci\project\ninja;%PATH% & call C:\PROGRA~2\MICROS~2\2019\Community\VC\Auxiliary\Build\vcvars64.bat & mkdir build & cd build & cmake -GNinja ${CONFIGURE_ARGS} .. & ninja
            shell: cmd.exe
        - run:
            name: Run tests
            command: PATH=C:\Users\circleci\project\ninja;%PATH% & ninja run_tests
            working_directory: build
            shell: cmd.exe
        - store_test_results: # Note that this command will fail when running CircleCI locally, that is expected behaviour
            path: build/test-results
        - store_artifacts:
            path: build/test-results

jobs:
  centos-7-amd64:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-centos-7-amd64:latest
      CONFIGURE_ARGS: -DOPENSSL_ROOT_DIR=/usr/local/ssl
      SKIP_TESTS: style
  centos-8-amd64:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-centos-8-amd64:latest
      CONFIGURE_ARGS: -DOQS_PORTABLE_BUILD=OFF
      SKIP_TESTS: style
  debian-buster-amd64:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-debian-buster-amd64:latest
      SKIP_TESTS: style
  debian-buster-arm64:
    <<: *emulatedjob
    environment:
      ARCH: arm64
      CONFIGURE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF # sig-sphincs exhausts memory on CircleCI servers
  debian-buster-armhf:
    <<: *emulatedjob
    environment:
      ARCH: armhf
      CONFIGURE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF # sig-sphincs exhausts memory on CircleCI servers
  debian-buster-armel:
    <<: *emulatedjob
    environment:
      CONFIGURE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF # sig-sphincs exhausts memory on CircleCI servers
      ARCH: armel
  ubuntu-bionic-x86_64-gcc8:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: gcc-8
  ubuntu-bionic-x86_64-gcc7-noopenssl:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: gcc-7
      CONFIGURE_ARGS: -DOQS_USE_OPENSSL=OFF
  ubuntu-bionic-x86_64-gcc7-shared:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: gcc-7
      CONFIGURE_ARGS: -DBUILD_SHARED_LIBS=ON
      #TODO: _init and _fini trip test_namespace.py
      SKIP_TESTS: namespace
  ubuntu-bionic-x86_64-clang9:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: clang-9
      #TODO: Adding -DOQS_PORTABLE_BUILD=OFF causes kat_sig picnic to fail
  ubuntu-bionic-x86_64-asan:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: clang-9
      CONFIGURE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZER=Address
  ubuntu-bionic-x86_64-ubsan:
    <<: *oqsjob
    environment:
      IMAGE: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
      CC: clang-9
      CONFIGURE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZER=Undefined
  macOS:
    macos:
        xcode: "11.3.0"
    environment:
        CONFIGURE_ARGS: -DOQS_USE_OPENSSL=OFF
        SKIP_TESTS: style
    steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              scripts/git_no_checkin_in_last_day.sh || (
              brew update &&
              brew unlink python@2 &&
              brew install cmake ninja doxygen astyle &&
              pip3 install pytest pytest-xdist
              )
        - run:
            name: Configure
            command: scripts/git_no_checkin_in_last_day.sh || (mkdir build && cd build && cmake -GNinja ${CONFIGURE_ARGS} ..)
        - run:
            name: Build
            command: ../scripts/git_no_checkin_in_last_day.sh || ninja
            working_directory: build
        - run:
            name: System information
            command: scripts/git_no_checkin_in_last_day.sh || (sysctl -a | grep machdep.cpu)
        - run:
            name: Run tests
            command: ../scripts/git_no_checkin_in_last_day.sh || ninja run_tests
            working_directory: build
        - store_test_results: # Note that this command will fail when running CircleCI locally, that is expected behaviour
            path: build/test-results
        - store_artifacts:
            path: build/test-results
  win-static:
    <<: *winjob
    environment:
        CONFIGURE_ARGS: -DOQS_USE_OPENSSL=OFF
        SKIP_TESTS: style
  win-shared:
    <<: *winjob
    environment:
        CONFIGURE_ARGS: -DOQS_USE_OPENSSL=OFF -DBUILD_SHARED_LIBS=ON
        SKIP_TESTS: style

workflows:
  version: 2
  build:
    jobs:
      - win-static:
          filters:
            branches:
              only:
                - /mb-.*/
      - win-shared:
          filters:
            branches:
              only:
                - /mb-.*/
      - centos-7-amd64
      - centos-8-amd64
      - debian-buster-amd64
      - macOS
      - ubuntu-bionic-x86_64-gcc8
      - ubuntu-bionic-x86_64-clang9
      - ubuntu-bionic-x86_64-gcc7-shared
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - centos-7-amd64
      - centos-8-amd64
      - debian-buster-amd64
      - debian-buster-arm64
      - debian-buster-armhf
      - debian-buster-armel
      - macOS
      - ubuntu-bionic-x86_64-gcc7-noopenssl
      - ubuntu-bionic-x86_64-gcc7-shared
      - ubuntu-bionic-x86_64-gcc8
      - ubuntu-bionic-x86_64-clang9
      - ubuntu-bionic-x86_64-asan
