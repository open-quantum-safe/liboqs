/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP
#define CDTSAMP

#include <stdint.h>
#include "params.h"

#if defined(_qTESLA_p_I_)

// Sigma = 8.5, 64-bit precision

#define CDT_ROWS 79
#define CDT_COLS 1

static const int64_t cdt_v[CDT_ROWS * CDT_COLS] = {
	0x0000000000000000LL, // 0
	0x0601F22A500CC7A8LL, // 1
	0x11F09FFA2C5FC47BLL, // 2
	0x1DA089E986E44DD0LL, // 3
	0x28EAB25D098A3FC4LL, // 4
	0x33AC2F2629FB74E1LL, // 5
	0x3DC767DC8ACB92C0LL, // 6
	0x4724FC6266858F15LL, // 7
	0x4FB448F4A453A0DALL, // 8
	0x576B8599E84680FELL, // 9
	0x5E4786DA642175EDLL, // 10
	0x644B2C928636728DLL, // 11
	0x697E90CEEF86C587LL, // 12
	0x6DEE0B964F31939CLL, // 13
	0x71A92144AECBF9C8LL, // 14
	0x74C16FD53C541320LL, // 15
	0x7749AC921BE6DDD7LL, // 16
	0x7954BFA4500F2512LL, // 17
	0x7AF5067A5DB840A0LL, // 18
	0x7C3BC17C247ABCF5LL, // 19
	0x7D38AD76552703B2LL, // 20
	0x7DF9C5DF1D0D194ELL, // 21
	0x7E8B2ABA31CB9022LL, // 22
	0x7EF7237C012104E5LL, // 23
	0x7F4637C5DB74A24BLL, // 24
	0x7F7F570794A5DBD7LL, // 25
	0x7FA808CC46520B31LL, // 26
	0x7FC4A083D37BE5AALL, // 27
	0x7FD870CA844EAAAFLL, // 28
	0x7FE5FB5D7DF05836LL, // 29
	0x7FEF1BFAD80746C4LL, // 30
	0x7FF52D4E62D85918LL, // 31
	0x7FF927BA255CA95DLL, // 32
	0x7FFBBA43E93981C4LL, // 33
	0x7FFD5E3D8A495B23LL, // 34
	0x7FFE6664A6AF0B69LL, // 35
	0x7FFF0A4116522D02LL, // 36
	0x7FFF6E8126587ADFLL, // 37
	0x7FFFAAFE9B78D7DBLL, // 38
	0x7FFFCEFDF43C5A28LL, // 39
	0x7FFFE41E98DD822ALL, // 40
	0x7FFFF059632A0790LL, // 41
	0x7FFFF754BBBA1A80LL, // 42
	0x7FFFFB43173D3045LL, // 43
	0x7FFFFD71ED7035C3LL, // 44
	0x7FFFFEA3FCCD43D9LL, // 45
	0x7FFFFF494DEDC322LL, // 46
	0x7FFFFFA15F462D28LL, // 47
	0x7FFFFFCFA48F7D91LL, // 48
	0x7FFFFFE79E824F8DLL, // 49
	0x7FFFFFF3DF54D3FALL, // 50
	0x7FFFFFFA0C61A0E6LL, // 51
	0x7FFFFFFD1E52AF77LL, // 52
	0x7FFFFFFE9FA52863LL, // 53
	0x7FFFFFFF59F5AC1BLL, // 54
	0x7FFFFFFFB2CF525FLL, // 55
	0x7FFFFFFFDC993BFELL, // 56
	0x7FFFFFFFEFFB9990LL, // 57
	0x7FFFFFFFF8D9D13CLL, // 58
	0x7FFFFFFFFCDA22DDLL, // 59
	0x7FFFFFFFFEA1F462LL, // 60
	0x7FFFFFFFFF6A0113LL, // 61
	0x7FFFFFFFFFC09859LL, // 62
	0x7FFFFFFFFFE58F81LL, // 63
	0x7FFFFFFFFFF51FC6LL, // 64
	0x7FFFFFFFFFFB9636LL, // 65
	0x7FFFFFFFFFFE3BC3LL, // 66
	0x7FFFFFFFFFFF4D6ELL, // 67
	0x7FFFFFFFFFFFBA72LL, // 68
	0x7FFFFFFFFFFFE546LL, // 69
	0x7FFFFFFFFFFFF5DFLL, // 70
	0x7FFFFFFFFFFFFC36LL, // 71
	0x7FFFFFFFFFFFFE9ALL, // 72
	0x7FFFFFFFFFFFFF7ELL, // 73
	0x7FFFFFFFFFFFFFD1LL, // 74
	0x7FFFFFFFFFFFFFEFLL, // 75
	0x7FFFFFFFFFFFFFFALL, // 76
	0x7FFFFFFFFFFFFFFELL, // 77
	0x7FFFFFFFFFFFFFFFLL, // 78
};                        // cdt_v

// memory requirements:
//     2048 samples: 25524 bytes
//     1024 samples: 13236 bytes
//      512 samples:  7092 bytes
//      256 samples:  4020 bytes
//      128 samples:  2484 bytes
//       64 samples:  1716 bytes
//       32 samples:  1332 bytes
// table alone: 632 bytes

#elif defined(_qTESLA_p_III_)

// Sigma = 8.5, 128-bit precision

#define CDT_ROWS 112
#define CDT_COLS 2

static const int64_t cdt_v[CDT_ROWS * CDT_COLS] = {
	0x0000000000000000LL, 0x0000000000000000LL, // 0
	0x0601F22A500CC7A8LL, 0x5C36071879D7F29CLL, // 1
	0x11F09FFA2C5FC47BLL, 0x006E7368FCAA94C5LL, // 2
	0x1DA089E986E44DD0LL, 0x22BD3391A311CA98LL, // 3
	0x28EAB25D098A3FC4LL, 0x27EC7FA0795AFD02LL, // 4
	0x33AC2F2629FB74E1LL, 0x4C31101FE4B3A4FBLL, // 5
	0x3DC767DC8ACB92BFLL, 0x7D588F2058FD3666LL, // 6
	0x4724FC6266858F14LL, 0x7210E7644E84AB38LL, // 7
	0x4FB448F4A453A0DALL, 0x134D9096744F2C35LL, // 8
	0x576B8599E84680FELL, 0x250FDC5FEE421559LL, // 9
	0x5E4786DA642175EDLL, 0x5102F2B84F7D3D64LL, // 10
	0x644B2C928636728DLL, 0x47E311B28ABEDB79LL, // 11
	0x697E90CEEF86C587LL, 0x4014C4FD9ABB7E58LL, // 12
	0x6DEE0B964F31939CLL, 0x28F531F29D09FC92LL, // 13
	0x71A92144AECBF9C8LL, 0x1FE09929D060F060LL, // 14
	0x74C16FD53C541320LL, 0x27D6A8BE73668AB5LL, // 15
	0x7749AC921BE6DDD7LL, 0x028C53CB99842943LL, // 16
	0x7954BFA4500F2512LL, 0x53AB624EA6DA5806LL, // 17
	0x7AF5067A5DB840A0LL, 0x5690CAAD0EFD198FLL, // 18
	0x7C3BC17C247ABCF5LL, 0x47A9BA4CEC78DD56LL, // 19
	0x7D38AD76552703B2LL, 0x3A41A069DF027154LL, // 20
	0x7DF9C5DF1D0D194ELL, 0x46C4ED0FE219108ELL, // 21
	0x7E8B2ABA31CB9021LL, 0x790B6859EB262F32LL, // 22
	0x7EF7237C012104E4LL, 0x7A962E1CF355CB8DLL, // 23
	0x7F4637C5DB74A24BLL, 0x36050BD919987AE3LL, // 24
	0x7F7F570794A5DBD7LL, 0x21D9D963CE13710BLL, // 25
	0x7FA808CC46520B31LL, 0x609EF49A214C8550LL, // 26
	0x7FC4A083D37BE5A9LL, 0x676CF64EEB88DEB5LL, // 27
	0x7FD870CA844EAAAFLL, 0x5E55C069392C0E55LL, // 28
	0x7FE5FB5D7DF05836LL, 0x4ADC5D602790AC45LL, // 29
	0x7FEF1BFAD80746C4LL, 0x0E6697A88ADAC57DLL, // 30
	0x7FF52D4E62D85918LL, 0x38EF498670EA5D39LL, // 31
	0x7FF927BA255CA95DLL, 0x598492ACEEA68F93LL, // 32
	0x7FFBBA43E93981C4LL, 0x089660D1883C536ALL, // 33
	0x7FFD5E3D8A495B22LL, 0x63F0943F348EBD44LL, // 34
	0x7FFE6664A6AF0B69LL, 0x50793CBCAF615F7ELL, // 35
	0x7FFF0A4116522D02LL, 0x39699CDECACC52E6LL, // 36
	0x7FFF6E8126587ADFLL, 0x190EE3999D0869D3LL, // 37
	0x7FFFAAFE9B78D7DBLL, 0x1D0C89A545628820LL, // 38
	0x7FFFCEFDF43C5A28LL, 0x59F20B55E6FEAF66LL, // 39
	0x7FFFE41E98DD822ALL, 0x5AC91E352C06E8F8LL, // 40
	0x7FFFF059632A0790LL, 0x597D72D54BFD95B8LL, // 41
	0x7FFFF754BBBA1A80LL, 0x13A0E40DAFE5FAD5LL, // 42
	0x7FFFFB43173D3045LL, 0x36B097C125D3B60BLL, // 43
	0x7FFFFD71ED7035C2LL, 0x7926EAB8DD7E15ECLL, // 44
	0x7FFFFEA3FCCD43D8LL, 0x7C68410F13B45A57LL, // 45
	0x7FFFFF494DEDC321LL, 0x7C6C4BF2BD3D6126LL, // 46
	0x7FFFFFA15F462D28LL, 0x1AA7ED09664C7034LL, // 47
	0x7FFFFFCFA48F7D91LL, 0x39840E6AE5F3A59ALL, // 48
	0x7FFFFFE79E824F8DLL, 0x4924CF10073FBD97LL, // 49
	0x7FFFFFF3DF54D3FALL, 0x4D4CFB867FE894A0LL, // 50
	0x7FFFFFFA0C61A0E5LL, 0x7541836FFA42AB98LL, // 51
	0x7FFFFFFD1E52AF76LL, 0x75B9C3CD68C470A1LL, // 52
	0x7FFFFFFE9FA52863LL, 0x4853F3DA1194E593LL, // 53
	0x7FFFFFFF59F5AC1BLL, 0x25DB05A299156204LL, // 54
	0x7FFFFFFFB2CF525FLL, 0x390B565A6200CEF9LL, // 55
	0x7FFFFFFFDC993BFDLL, 0x6CF31D5E3702E993LL, // 56
	0x7FFFFFFFEFFB9990LL, 0x329FF358B0FEA157LL, // 57
	0x7FFFFFFFF8D9D13CLL, 0x03F434E5B0F7102CLL, // 58
	0x7FFFFFFFFCDA22DDLL, 0x3F0566A55ED9FF39LL, // 59
	0x7FFFFFFFFEA1F462LL, 0x630ACB335E77092CLL, // 60
	0x7FFFFFFFFF6A0113LL, 0x07CC976BFD26390ALL, // 61
	0x7FFFFFFFFFC09859LL, 0x2D97F5DFFF27057FLL, // 62
	0x7FFFFFFFFFE58F81LL, 0x3AA12C690772A0ADLL, // 63
	0x7FFFFFFFFFF51FC6LL, 0x49EC041BED651006LL, // 64
	0x7FFFFFFFFFFB9636LL, 0x5A5297667458C6FDLL, // 65
	0x7FFFFFFFFFFE3BC3LL, 0x3AEB6E08C8EC4BFALL, // 66
	0x7FFFFFFFFFFF4D6DLL, 0x7D307D0C8CE498DALL, // 67
	0x7FFFFFFFFFFFBA72LL, 0x053994580D7DC05DLL, // 68
	0x7FFFFFFFFFFFE546LL, 0x40BB7EF65CF5FE3FLL, // 69
	0x7FFFFFFFFFFFF5DELL, 0x7EF228B790BC0177LL, // 70
	0x7FFFFFFFFFFFFC36LL, 0x47658FC9B2885B3DLL, // 71
	0x7FFFFFFFFFFFFE9ALL, 0x3D2B3C7F28A6EC0ELL, // 72
	0x7FFFFFFFFFFFFF7DLL, 0x7847A7B3C7724B90LL, // 73
	0x7FFFFFFFFFFFFFD1LL, 0x2A22090A38604F8BLL, // 74
	0x7FFFFFFFFFFFFFEFLL, 0x3D78F6F6B7FBA48ALL, // 75
	0x7FFFFFFFFFFFFFFALL, 0x1DB612EA327C58E5LL, // 76
	0x7FFFFFFFFFFFFFFELL, 0x01BB4343B7A1AA7FLL, // 77
	0x7FFFFFFFFFFFFFFFLL, 0x299EDB0E08FC7D1CLL, // 78
	0x7FFFFFFFFFFFFFFFLL, 0x630DFED56DC6FE2FLL, // 79
	0x7FFFFFFFFFFFFFFFLL, 0x766EBD79D9EA2772LL, // 80
	0x7FFFFFFFFFFFFFFFLL, 0x7CE1751313AF3AAALL, // 81
	0x7FFFFFFFFFFFFFFFLL, 0x7EFF316B13239128LL, // 82
	0x7FFFFFFFFFFFFFFFLL, 0x7FAE8985123B968FLL, // 83
	0x7FFFFFFFFFFFFFFFLL, 0x7FE682CA0221573FLL, // 84
	0x7FFFFFFFFFFFFFFFLL, 0x7FF82221D52982D9LL, // 85
	0x7FFFFFFFFFFFFFFFLL, 0x7FFD9AEF12F9B52BLL, // 86
	0x7FFFFFFFFFFFFFFFLL, 0x7FFF47E9D0029CF9LL, // 87
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFC97A450E0C2BLL, // 88
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFF01268E14164LL, // 89
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFB6907281E51LL, // 90
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFEB20BFED814LL, // 91
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFA260D83A35LL, // 92
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFE61CA83A68LL, // 93
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFF8F06FFAC3LL, // 94
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFE19BAF376LL, // 95
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFF7EF85C68LL, // 96
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFDE3AE07CLL, // 97
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFF74847F9LL, // 98
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFDC7C1C4LL, // 99
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFF714A3DLL, // 100
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFDCA631LL, // 101
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFF75CE6LL, // 102
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFDEB28LL, // 103
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFF8159LL, // 104
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFE24ELL, // 105
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFF922LL, // 106
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFE6FLL, // 107
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFA6LL, // 108
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFECLL, // 109
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFBLL, // 110
	0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, // 111
};                                              // cdt_v

// memory requirements:
//     2048 samples: 43200 bytes
//     1024 samples: 22720 bytes
//      512 samples: 12480 bytes
//      256 samples:  7360 bytes
//      128 samples:  4800 bytes
//       64 samples:  3520 bytes
//       32 samples:  2880 bytes
// table alone: 1792 bytes

#endif

#endif