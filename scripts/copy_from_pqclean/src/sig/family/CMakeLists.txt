# This file was generated by
# scripts/copy_from_pqclean/copy_from_pqclean.py
{% for scheme in schemes %}
if(OQS_ENABLE_SIG_{{ family }}_{{ scheme['scheme_c'] }})
    {% for impl in scheme['metadata']['implementations'] %}
{%- if impl['name']|upper != "CLEAN" %}
if(OQS_ENABLE_SIG_{{ family }}_{{ scheme['scheme_c'] }}_{{ impl['name'] }})
{%- endif %}
        set(SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_{{ impl['name']|upper }}_SRCS {% for source in impl['sources']|sort %}pqclean_{{ scheme['pqclean_scheme'].replace('-','_') }}_{{ impl['name'] }}/{{ source }}{% if not loop.last %} {% endif %}{% endfor %})
{%- if impl['name']|upper != "CLEAN" %}
else()
        set(SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_{{ impl['name']|upper }}_SRCS pqclean_{{ family }}{{ scheme['scheme'] }}_{{ impl['name'] }}/oqs_unsupported.c )
endif()
{%- endif %}
    {% endfor %}
{% if scheme['metadata']['implementations']|length > 1 -%}
set(SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_CLEAN_SRCS ${SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_CLEAN_SRCS} sig_{{ family }}_{{ scheme['scheme_c'] }}.c )
{% else %}
set(SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_{{ scheme['metadata']['implementations'][0]['name']|upper }}_SRCS ${SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_{{ scheme['metadata']['implementations'][0]['name']|upper }}_SRCS} sig_{{ family }}_{{ scheme['scheme_c'] }}.c )
{% endif %}
endif()
{% endfor %}

{% for scheme in schemes %}
    {% for impl in scheme['metadata']['implementations'] %}
add_library({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'] }} OBJECT ${SRCS_{{ family|upper }}_{{ scheme['scheme']|upper }}_{{ impl['name']|upper }}_SRCS})
target_include_directories({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'] }} PRIVATE ${PROJECT_SOURCE_DIR}/src/common/pqclean_shims)
target_include_directories({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'] }} PRIVATE ${PROJECT_SOURCE_DIR}/src/sig/{{ family }}/pqclean_{{ family }}{{ scheme['scheme'] }}_{{ impl['name'] }})
target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'] }} PUBLIC {{ impl['compile_options'] }})
    {% endfor %}
{% endfor %}


