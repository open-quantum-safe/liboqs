--- upstream/lib/low/KeccakP-1600/common/KeccakP-1600-64.macros
+++ upstream-patched/lib/low/KeccakP-1600/common/KeccakP-1600-64.macros
@@ -540,42 +540,48 @@
     X##su = Y##su; \
 
 #if (PLATFORM_BYTE_ORDER == IS_LITTLE_ENDIAN)
-#define HTOLE64(x) (x)
+#define LOAD64(x) ((x)[0] \
+      | (uint64_t) (x)[1] << 0x08 \
+      | (uint64_t) (x)[2] << 0x10 \
+      | (uint64_t) (x)[3] << 0x18 \
+      | (uint64_t) (x)[4] << 0x20 \
+      | (uint64_t) (x)[5] << 0x28 \
+      | (uint64_t) (x)[6] << 0x30 \
+      | (uint64_t) (x)[7] << 0x38 )
 #else
-#define HTOLE64(x) (\
-  ((x & 0xff00000000000000ull) >> 56) | \
-  ((x & 0x00ff000000000000ull) >> 40) | \
-  ((x & 0x0000ff0000000000ull) >> 24) | \
-  ((x & 0x000000ff00000000ull) >> 8)  | \
-  ((x & 0x00000000ff000000ull) << 8)  | \
-  ((x & 0x0000000000ff0000ull) << 24) | \
-  ((x & 0x000000000000ff00ull) << 40) | \
-  ((x & 0x00000000000000ffull) << 56))
+#define LOAD64(x) ((x)[7] \
+      | (uint64_t) (x)[6] << 0x08 \
+      | (uint64_t) (x)[5] << 0x10 \
+      | (uint64_t) (x)[4] << 0x18 \
+      | (uint64_t) (x)[3] << 0x20 \
+      | (uint64_t) (x)[2] << 0x28 \
+      | (uint64_t) (x)[1] << 0x30 \
+      | (uint64_t) (x)[0] << 0x38 )
 #endif
 
 #define addInput(X, input, laneCount) \
     if (laneCount == 21) { \
-        X##ba ^= HTOLE64(input[ 0]); \
-        X##be ^= HTOLE64(input[ 1]); \
-        X##bi ^= HTOLE64(input[ 2]); \
-        X##bo ^= HTOLE64(input[ 3]); \
-        X##bu ^= HTOLE64(input[ 4]); \
-        X##ga ^= HTOLE64(input[ 5]); \
-        X##ge ^= HTOLE64(input[ 6]); \
-        X##gi ^= HTOLE64(input[ 7]); \
-        X##go ^= HTOLE64(input[ 8]); \
-        X##gu ^= HTOLE64(input[ 9]); \
-        X##ka ^= HTOLE64(input[10]); \
-        X##ke ^= HTOLE64(input[11]); \
-        X##ki ^= HTOLE64(input[12]); \
-        X##ko ^= HTOLE64(input[13]); \
-        X##ku ^= HTOLE64(input[14]); \
-        X##ma ^= HTOLE64(input[15]); \
-        X##me ^= HTOLE64(input[16]); \
-        X##mi ^= HTOLE64(input[17]); \
-        X##mo ^= HTOLE64(input[18]); \
-        X##mu ^= HTOLE64(input[19]); \
-        X##sa ^= HTOLE64(input[20]); \
+        X##ba ^= LOAD64(input + 0x00); \
+        X##be ^= LOAD64(input + 0x08); \
+        X##bi ^= LOAD64(input + 0x10); \
+        X##bo ^= LOAD64(input + 0x18); \
+        X##bu ^= LOAD64(input + 0x20); \
+        X##ga ^= LOAD64(input + 0x28); \
+        X##ge ^= LOAD64(input + 0x30); \
+        X##gi ^= LOAD64(input + 0x38); \
+        X##go ^= LOAD64(input + 0x40); \
+        X##gu ^= LOAD64(input + 0x48); \
+        X##ka ^= LOAD64(input + 0x50); \
+        X##ke ^= LOAD64(input + 0x58); \
+        X##ki ^= LOAD64(input + 0x60); \
+        X##ko ^= LOAD64(input + 0x68); \
+        X##ku ^= LOAD64(input + 0x70); \
+        X##ma ^= LOAD64(input + 0x78); \
+        X##me ^= LOAD64(input + 0x80); \
+        X##mi ^= LOAD64(input + 0x88); \
+        X##mo ^= LOAD64(input + 0x90); \
+        X##mu ^= LOAD64(input + 0x98); \
+        X##sa ^= LOAD64(input + 0xA0); \
     } \
     else if (laneCount < 16) { \
         if (laneCount < 8) { \
@@ -584,165 +590,165 @@
                     if (laneCount < 1) { \
                     } \
                     else { \
-                        X##ba ^= HTOLE64(input[ 0]); \
+                        X##ba ^= LOAD64(input + 0x00); \
                     } \
                 } \
                 else { \
-                    X##ba ^= HTOLE64(input[ 0]); \
-                    X##be ^= HTOLE64(input[ 1]); \
+                    X##ba ^= LOAD64(input + 0x00); \
+                    X##be ^= LOAD64(input + 0x08); \
                     if (laneCount < 3) { \
                     } \
                     else { \
-                        X##bi ^= HTOLE64(input[ 2]); \
+                        X##bi ^= LOAD64(input + 0x10); \
                     } \
                 } \
             } \
             else { \
-                X##ba ^= HTOLE64(input[ 0]); \
-                X##be ^= HTOLE64(input[ 1]); \
-                X##bi ^= HTOLE64(input[ 2]); \
-                X##bo ^= HTOLE64(input[ 3]); \
+                X##ba ^= LOAD64(input + 0x00); \
+                X##be ^= LOAD64(input + 0x08); \
+                X##bi ^= LOAD64(input + 0x10); \
+                X##bo ^= LOAD64(input + 0x18); \
                 if (laneCount < 6) { \
                     if (laneCount < 5) { \
                     } \
                     else { \
-                        X##bu ^= HTOLE64(input[ 4]); \
+                        X##bu ^= LOAD64(input + 0x20); \
                     } \
                 } \
                 else { \
-                    X##bu ^= HTOLE64(input[ 4]); \
-                    X##ga ^= HTOLE64(input[ 5]); \
+                    X##bu ^= LOAD64(input + 0x20); \
+                    X##ga ^= LOAD64(input + 0x28); \
                     if (laneCount < 7) { \
                     } \
                     else { \
-                        X##ge ^= HTOLE64(input[ 6]); \
+                        X##ge ^= LOAD64(input + 0x30); \
                     } \
                 } \
             } \
         } \
         else { \
-            X##ba ^= HTOLE64(input[ 0]); \
-            X##be ^= HTOLE64(input[ 1]); \
-            X##bi ^= HTOLE64(input[ 2]); \
-            X##bo ^= HTOLE64(input[ 3]); \
-            X##bu ^= HTOLE64(input[ 4]); \
-            X##ga ^= HTOLE64(input[ 5]); \
-            X##ge ^= HTOLE64(input[ 6]); \
-            X##gi ^= HTOLE64(input[ 7]); \
+            X##ba ^= LOAD64(input + 0x00); \
+            X##be ^= LOAD64(input + 0x08); \
+            X##bi ^= LOAD64(input + 0x10); \
+            X##bo ^= LOAD64(input + 0x18); \
+            X##bu ^= LOAD64(input + 0x20); \
+            X##ga ^= LOAD64(input + 0x28); \
+            X##ge ^= LOAD64(input + 0x30); \
+            X##gi ^= LOAD64(input + 0x38); \
             if (laneCount < 12) { \
                 if (laneCount < 10) { \
                     if (laneCount < 9) { \
                     } \
                     else { \
-                        X##go ^= HTOLE64(input[ 8]); \
+                        X##go ^= LOAD64(input + 0x40); \
                     } \
                 } \
                 else { \
-                    X##go ^= HTOLE64(input[ 8]); \
-                    X##gu ^= HTOLE64(input[ 9]); \
+                    X##go ^= LOAD64(input + 0x40); \
+                    X##gu ^= LOAD64(input + 0x48); \
                     if (laneCount < 11) { \
                     } \
                     else { \
-                        X##ka ^= HTOLE64(input[10]); \
+                        X##ka ^= LOAD64(input + 0x50); \
                     } \
                 } \
             } \
             else { \
-                X##go ^= HTOLE64(input[ 8]); \
-                X##gu ^= HTOLE64(input[ 9]); \
-                X##ka ^= HTOLE64(input[10]); \
-                X##ke ^= HTOLE64(input[11]); \
+                X##go ^= LOAD64(input + 0x40); \
+                X##gu ^= LOAD64(input + 0x48); \
+                X##ka ^= LOAD64(input + 0x50); \
+                X##ke ^= LOAD64(input + 0x58); \
                 if (laneCount < 14) { \
                     if (laneCount < 13) { \
                     } \
                     else { \
-                        X##ki ^= HTOLE64(input[12]); \
+                        X##ki ^= LOAD64(input + 0x60); \
                     } \
                 } \
                 else { \
-                    X##ki ^= HTOLE64(input[12]); \
-                    X##ko ^= HTOLE64(input[13]); \
+                    X##ki ^= LOAD64(input + 0x60); \
+                    X##ko ^= LOAD64(input + 0x68); \
                     if (laneCount < 15) { \
                     } \
                     else { \
-                        X##ku ^= HTOLE64(input[14]); \
+                        X##ku ^= LOAD64(input + 0x70); \
                     } \
                 } \
             } \
         } \
     } \
     else { \
-        X##ba ^= HTOLE64(input[ 0]); \
-        X##be ^= HTOLE64(input[ 1]); \
-        X##bi ^= HTOLE64(input[ 2]); \
-        X##bo ^= HTOLE64(input[ 3]); \
-        X##bu ^= HTOLE64(input[ 4]); \
-        X##ga ^= HTOLE64(input[ 5]); \
-        X##ge ^= HTOLE64(input[ 6]); \
-        X##gi ^= HTOLE64(input[ 7]); \
-        X##go ^= HTOLE64(input[ 8]); \
-        X##gu ^= HTOLE64(input[ 9]); \
-        X##ka ^= HTOLE64(input[10]); \
-        X##ke ^= HTOLE64(input[11]); \
-        X##ki ^= HTOLE64(input[12]); \
-        X##ko ^= HTOLE64(input[13]); \
-        X##ku ^= HTOLE64(input[14]); \
-        X##ma ^= HTOLE64(input[15]); \
+        X##ba ^= LOAD64(input + 0x00); \
+        X##be ^= LOAD64(input + 0x08); \
+        X##bi ^= LOAD64(input + 0x10); \
+        X##bo ^= LOAD64(input + 0x18); \
+        X##bu ^= LOAD64(input + 0x20); \
+        X##ga ^= LOAD64(input + 0x28); \
+        X##ge ^= LOAD64(input + 0x30); \
+        X##gi ^= LOAD64(input + 0x38); \
+        X##go ^= LOAD64(input + 0x40); \
+        X##gu ^= LOAD64(input + 0x48); \
+        X##ka ^= LOAD64(input + 0x50); \
+        X##ke ^= LOAD64(input + 0x58); \
+        X##ki ^= LOAD64(input + 0x60); \
+        X##ko ^= LOAD64(input + 0x68); \
+        X##ku ^= LOAD64(input + 0x70); \
+        X##ma ^= LOAD64(input + 0x78); \
         if (laneCount < 24) { \
             if (laneCount < 20) { \
                 if (laneCount < 18) { \
                     if (laneCount < 17) { \
                     } \
                     else { \
-                        X##me ^= HTOLE64(input[16]); \
+                        X##me ^= LOAD64(input + 0x80); \
                     } \
                 } \
                 else { \
-                    X##me ^= HTOLE64(input[16]); \
-                    X##mi ^= HTOLE64(input[17]); \
+                    X##me ^= LOAD64(input + 0x80); \
+                    X##mi ^= LOAD64(input + 0x88); \
                     if (laneCount < 19) { \
                     } \
                     else { \
-                        X##mo ^= HTOLE64(input[18]); \
+                        X##mo ^= LOAD64(input + 0x90); \
                     } \
                 } \
             } \
             else { \
-                X##me ^= HTOLE64(input[16]); \
-                X##mi ^= HTOLE64(input[17]); \
-                X##mo ^= HTOLE64(input[18]); \
-                X##mu ^= HTOLE64(input[19]); \
+                X##me ^= LOAD64(input + 0x80); \
+                X##mi ^= LOAD64(input + 0x88); \
+                X##mo ^= LOAD64(input + 0x90); \
+                X##mu ^= LOAD64(input + 0x98); \
                 if (laneCount < 22) { \
                     if (laneCount < 21) { \
                     } \
                     else { \
-                        X##sa ^= HTOLE64(input[20]); \
+                        X##sa ^= LOAD64(input + 0xA0); \
                     } \
                 } \
                 else { \
-                    X##sa ^= HTOLE64(input[20]); \
-                    X##se ^= HTOLE64(input[21]); \
+                    X##sa ^= LOAD64(input + 0xA0); \
+                    X##se ^= LOAD64(input + 0xA8); \
                     if (laneCount < 23) { \
                     } \
                     else { \
-                        X##si ^= HTOLE64(input[22]); \
+                        X##si ^= LOAD64(input + 0xA8); \
                     } \
                 } \
             } \
         } \
         else { \
-            X##me ^= HTOLE64(input[16]); \
-            X##mi ^= HTOLE64(input[17]); \
-            X##mo ^= HTOLE64(input[18]); \
-            X##mu ^= HTOLE64(input[19]); \
-            X##sa ^= HTOLE64(input[20]); \
-            X##se ^= HTOLE64(input[21]); \
-            X##si ^= HTOLE64(input[22]); \
-            X##so ^= HTOLE64(input[23]); \
+            X##me ^= LOAD64(input + 0x80); \
+            X##mi ^= LOAD64(input + 0x88); \
+            X##mo ^= LOAD64(input + 0x90); \
+            X##mu ^= LOAD64(input + 0x98); \
+            X##sa ^= LOAD64(input + 0xA0); \
+            X##se ^= LOAD64(input + 0xA8); \
+            X##si ^= LOAD64(input + 0xB0); \
+            X##so ^= LOAD64(input + 0xB8); \
             if (laneCount < 25) { \
             } \
             else { \
-                X##su ^= HTOLE64(input[24]); \
+                X##su ^= LOAD64(input + 0xC0); \
             } \
         } \
     }

