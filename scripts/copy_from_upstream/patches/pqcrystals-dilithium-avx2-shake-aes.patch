3a2763b7448b2d9e2fd3ba7b5b96636806c3c96c
diff --git a/avx2/poly.c b/avx2/poly.c
index 0e9e988..bb268fd 100644
--- a/avx2/poly.c
+++ b/avx2/poly.c
@@ -403,6 +403,7 @@ void poly_uniform(poly *a, const uint8_t seed[SEEDBYTES], uint16_t nonce)
   stream128_state state;
   stream128_init(&state, seed, nonce);
   poly_uniform_preinit(a, &state);
+  stream128_release(&state);
 }
 
 #ifndef DILITHIUM_USE_AES
@@ -418,7 +419,7 @@ void poly_uniform_4x(poly *a0,
 {
   unsigned int ctr0, ctr1, ctr2, ctr3;
   ALIGNED_UINT8(REJ_UNIFORM_BUFLEN+8) buf[4];
-  keccakx4_state state;
+  shake128x4incctx state;
   __m256i f;
 
   f = _mm256_loadu_si256((__m256i *)seed);
@@ -436,6 +437,7 @@ void poly_uniform_4x(poly *a0,
   buf[3].coeffs[SEEDBYTES+0] = nonce3;
   buf[3].coeffs[SEEDBYTES+1] = nonce3 >> 8;
 
+  shake128x4_inc_init(&state);
   shake128x4_absorb_once(&state, buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, SEEDBYTES + 2);
   shake128x4_squeezeblocks(buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, REJ_UNIFORM_NBLOCKS, &state);
 
@@ -452,6 +454,7 @@ void poly_uniform_4x(poly *a0,
     ctr2 += rej_uniform(a2->coeffs + ctr2, N - ctr2, buf[2].coeffs, SHAKE128_RATE);
     ctr3 += rej_uniform(a3->coeffs + ctr3, N - ctr3, buf[3].coeffs, SHAKE128_RATE);
   }
+  shake128x4_inc_ctx_release(&state);
 }
 #endif
 
@@ -535,6 +538,7 @@ void poly_uniform_eta(poly *a, const uint8_t seed[CRHBYTES], uint16_t nonce)
   stream256_state state;
   stream256_init(&state, seed, nonce);
   poly_uniform_eta_preinit(a, &state);
+  stream256_release(&state);
 }
 
 #ifndef DILITHIUM_USE_AES
@@ -552,7 +556,7 @@ void poly_uniform_eta_4x(poly *a0,
   ALIGNED_UINT8(REJ_UNIFORM_ETA_BUFLEN) buf[4];
 
   __m256i f;
-  keccakx4_state state;
+  shake256x4incctx state;
 
   f = _mm256_loadu_si256((__m256i *)&seed[0]);
   _mm256_store_si256(&buf[0].vec[0],f);
@@ -574,6 +578,7 @@ void poly_uniform_eta_4x(poly *a0,
   buf[3].coeffs[64] = nonce3;
   buf[3].coeffs[65] = nonce3 >> 8;
 
+  shake256x4_inc_init(&state);
   shake256x4_absorb_once(&state, buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, 66);
   shake256x4_squeezeblocks(buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, REJ_UNIFORM_ETA_NBLOCKS, &state);
 
@@ -590,6 +595,7 @@ void poly_uniform_eta_4x(poly *a0,
     ctr2 += rej_eta(a2->coeffs + ctr2, N - ctr2, buf[2].coeffs, SHAKE256_RATE);
     ctr3 += rej_eta(a3->coeffs + ctr3, N - ctr3, buf[3].coeffs, SHAKE256_RATE);
   }
+  shake256x4_inc_ctx_release(&state);
 }
 #endif
 
@@ -618,6 +624,7 @@ void poly_uniform_gamma1(poly *a, const uint8_t seed[CRHBYTES], uint16_t nonce)
   stream256_state state;
   stream256_init(&state, seed, nonce);
   poly_uniform_gamma1_preinit(a, &state);
+  stream256_release(&state);
 }
 
 #ifndef DILITHIUM_USE_AES
@@ -632,7 +639,7 @@ void poly_uniform_gamma1_4x(poly *a0,
                             uint16_t nonce3)
 {
   ALIGNED_UINT8(POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES+14) buf[4];
-  keccakx4_state state;
+  shake256x4incctx state;
   __m256i f;
 
   f = _mm256_loadu_si256((__m256i *)&seed[0]);
@@ -655,8 +662,10 @@ void poly_uniform_gamma1_4x(poly *a0,
   buf[3].coeffs[64] = nonce3;
   buf[3].coeffs[65] = nonce3 >> 8;
 
+  shake256x4_inc_init(&state);
   shake256x4_absorb_once(&state, buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, 66);
   shake256x4_squeezeblocks(buf[0].coeffs, buf[1].coeffs, buf[2].coeffs, buf[3].coeffs, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
+  shake256x4_inc_ctx_release(&state);
 
   polyz_unpack(a0, buf[0].coeffs);
   polyz_unpack(a1, buf[1].coeffs);
@@ -679,12 +688,12 @@ void poly_challenge(poly * restrict c, const uint8_t seed[SEEDBYTES]) {
   unsigned int i, b, pos;
   uint64_t signs;
   ALIGNED_UINT8(SHAKE256_RATE) buf;
-  keccak_state state;
+  shake256incctx state;
 
-  shake256_init(&state);
-  shake256_absorb(&state, seed, SEEDBYTES);
-  shake256_finalize(&state);
-  shake256_squeezeblocks(buf.coeffs, 1, &state);
+  shake256_inc_init(&state);
+  shake256_inc_absorb(&state, seed, SEEDBYTES);
+  shake256_inc_finalize(&state);
+  shake256_inc_squeeze(buf.coeffs, SHAKE256_RATE, &state);
 
   memcpy(&signs, buf.coeffs, 8);
   pos = 8;
@@ -704,6 +713,7 @@ void poly_challenge(poly * restrict c, const uint8_t seed[SEEDBYTES]) {
     c->coeffs[b] = 1 - 2*(signs & 1);
     signs >>= 1;
   }
+  shake256_inc_ctx_release(&state);
 }
 
 /*************************************************
diff --git a/avx2/sign.c b/avx2/sign.c
index 3dee7a62..8c254f07 100644
--- a/avx2/sign.c
+++ b/avx2/sign.c
@@ -97,17 +97,18 @@ int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 
   /* Sample short vectors s1 and s2 */
 #ifdef DILITHIUM_USE_AES
-  aes256ctr_init(&aesctx, rhoprime, 0);
+  aes256ctr_init_u64(&aesctx, rhoprime, 0);
   for(i = 0; i < L; ++i) {
     nonce = i;
-    aesctx.n = _mm_loadl_epi64((__m128i *)&nonce);
+    aes256ctr_init_iv_u64(&aesctx, nonce);
     poly_uniform_eta_preinit(&s1.vec[i], &aesctx);
   }
   for(i = 0; i < K; ++i) {
     nonce = L + i;
-    aesctx.n = _mm_loadl_epi64((__m128i *)&nonce);
+    aes256ctr_init_iv_u64(&aesctx, nonce);
     poly_uniform_eta_preinit(&s2.vec[i], &aesctx);
   }
+  aes256_ctx_release(&aesctx);
 #elif K == 4 && L == 4
   poly_uniform_eta_4x(&s1.vec[0], &s1.vec[1], &s1.vec[2], &s1.vec[3], rhoprime, 0, 1, 2, 3);
   poly_uniform_eta_4x(&s2.vec[0], &s2.vec[1], &s2.vec[2], &s2.vec[3], rhoprime, 4, 5, 6, 7);
@@ -134,7 +135,7 @@ int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
   polyvecl_ntt(&s1);
 
 #ifdef DILITHIUM_USE_AES
-  aes256ctr_init(&aesctx, rho, 0);
+  aes256ctr_init_u64(&aesctx, rho, 0);
 #endif
 
   for(i = 0; i < K; i++) {
@@ -142,7 +143,7 @@ int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 #ifdef DILITHIUM_USE_AES
     for(unsigned int j = 0; j < L; j++) {
       nonce = (i << 8) + j;
-      aesctx.n = _mm_loadl_epi64((__m128i *)&nonce);
+      aes256ctr_init_iv_u64(&aesctx, nonce);
       poly_uniform_preinit(&row->vec[j], &aesctx);
       poly_nttunpack(&row->vec[j]);
     }
@@ -164,6 +165,10 @@ int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
     polyt0_pack(sk + 3*SEEDBYTES + (L+K)*POLYETA_PACKEDBYTES + i*POLYT0_PACKEDBYTES, &t0);
   }
 
+#ifdef DILITHIUM_USE_AES
+  aes256_ctx_release(&aesctx);
+#endif
+
   /* Compute H(rho, t1) and store in secret key */
   shake256(sk + 2*SEEDBYTES, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 
@@ -197,7 +202,7 @@ int crypto_sign_signature(uint8_t *sig, size_t *siglen, const uint8_t *m, size_t
     polyvecl y;
     polyveck w0;
   } tmpv;
-  keccak_state state;
+  shake256incctx state;
 
   rho = seedbuf;
   tr = rho + SEEDBYTES;
@@ -207,11 +212,11 @@ int crypto_sign_signature(uint8_t *sig, size_t *siglen, const uint8_t *m, size_t
   unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 
   /* Compute CRH(tr, msg) */
-  shake256_init(&state);
-  shake256_absorb(&state, tr, SEEDBYTES);
-  shake256_absorb(&state, m, mlen);
-  shake256_finalize(&state);
-  shake256_squeeze(mu, CRHBYTES, &state);
+  shake256_inc_init(&state);
+  shake256_inc_absorb(&state, tr, SEEDBYTES);
+  shake256_inc_absorb(&state, m, mlen);
+  shake256_inc_finalize(&state);
+  shake256_inc_squeeze(mu, CRHBYTES, &state);
 
 #ifdef DILITHIUM_RANDOMIZED_SIGNING
   randombytes(rhoprime, CRHBYTES);
@@ -227,14 +232,14 @@ int crypto_sign_signature(uint8_t *sig, size_t *siglen, const uint8_t *m, size_t
 
 #ifdef DILITHIUM_USE_AES
   aes256ctr_ctx aesctx;
-  aes256ctr_init(&aesctx, rhoprime, 0);
+  aes256ctr_init_u64(&aesctx, rhoprime, 0);
 #endif
 
 rej:
   /* Sample intermediate vector y */
 #ifdef DILITHIUM_USE_AES
   for(i = 0; i < L; ++i) {
-    aesctx.n = _mm_loadl_epi64((__m128i *)&nonce);
+    aes256ctr_init_iv_u64(&aesctx, nonce);
     nonce++;
     poly_uniform_gamma1_preinit(&z.vec[i], &aesctx);
   }
@@ -268,11 +273,11 @@ rej:
   polyveck_decompose(&w1, &tmpv.w0, &w1);
   polyveck_pack_w1(sig, &w1);
 
-  shake256_init(&state);
-  shake256_absorb(&state, mu, CRHBYTES);
-  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
-  shake256_finalize(&state);
-  shake256_squeeze(sig, SEEDBYTES, &state);
+  shake256_inc_ctx_reset(&state);
+  shake256_inc_absorb(&state, mu, CRHBYTES);
+  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
+  shake256_inc_finalize(&state);
+  shake256_inc_squeeze(sig, SEEDBYTES, &state);
   poly_challenge(&c, sig);
   poly_ntt(&c);
 
@@ -317,6 +322,11 @@ rej:
     hint[OMEGA + i] = pos = pos + n;
   }
 
+#ifdef DILITHIUM_USE_AES
+  aes256_ctx_release(&aesctx);
+#endif
+
+  shake256_inc_ctx_release(&state);
   /* Pack z into signature */
   for(i = 0; i < L; i++)
     polyz_pack(sig + SEEDBYTES + i*POLYZ_PACKEDBYTES, &z.vec[i]);
@@ -380,18 +390,19 @@ int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m, size
   polyvecl *row = rowbuf;
   polyvecl z;
   poly c, w1, h;
-  keccak_state state;
+  shake256incctx state;
 
   if(siglen != CRYPTO_BYTES)
     return -1;
 
   /* Compute CRH(H(rho, t1), msg) */
   shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
-  shake256_init(&state);
-  shake256_absorb(&state, mu, SEEDBYTES);
-  shake256_absorb(&state, m, mlen);
-  shake256_finalize(&state);
-  shake256_squeeze(mu, CRHBYTES, &state);
+  shake256_inc_init(&state);
+  shake256_inc_absorb(&state, mu, SEEDBYTES);
+  shake256_inc_absorb(&state, m, mlen);
+  shake256_inc_finalize(&state);
+  shake256_inc_squeeze(mu, CRHBYTES, &state);
+  shake256_inc_ctx_release(&state);
 
   /* Expand challenge */
   poly_challenge(&c, sig);
@@ -404,7 +415,7 @@ int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m, size
   }
 
 #ifdef DILITHIUM_USE_AES
-  aes256ctr_init(&aesctx, pk, 0);
+  aes256ctr_init_u64(&aesctx, pk, 0);
 #endif
 
   for(i = 0; i < K; i++) {
@@ -412,7 +423,7 @@ int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m, size
 #ifdef DILITHIUM_USE_AES
     for(j = 0; j < L; j++) {
       nonce = (i << 8) + j;
-      aesctx.n = _mm_loadl_epi64((__m128i *)&nonce);
+      aes256ctr_init_iv_u64(&aesctx, nonce);
       poly_uniform_preinit(&row->vec[j], &aesctx);
       poly_nttunpack(&row->vec[j]);
     }
@@ -434,12 +445,21 @@ int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m, size
 
     /* Get hint polynomial and reconstruct w1 */
     memset(h.vec, 0, sizeof(poly));
-    if(hint[OMEGA + i] < pos || hint[OMEGA + i] > OMEGA)
+    if(hint[OMEGA + i] < pos || hint[OMEGA + i] > OMEGA) {
+#ifdef DILITHIUM_USE_AES
+      aes256_ctx_release(&aesctx);
+#endif
       return -1;
+    }
 
     for(j = pos; j < hint[OMEGA + i]; ++j) {
       /* Coefficients are ordered for strong unforgeability */
-      if(j > pos && hint[j] <= hint[j-1]) return -1;
+      if(j > pos && hint[j] <= hint[j-1]) {
+#ifdef DILITHIUM_USE_AES
+        aes256_ctx_release(&aesctx);
+#endif
+        return -1;
+      }
       h.coeffs[hint[j]] = 1;
     }
     pos = hint[OMEGA + i];
@@ -449,16 +469,21 @@ int crypto_sign_verify(const uint8_t *sig, size_t siglen, const uint8_t *m, size
     polyw1_pack(buf.coeffs + i*POLYW1_PACKEDBYTES, &w1);
   }
 
+#ifdef DILITHIUM_USE_AES
+  aes256_ctx_release(&aesctx);
+#endif
+
   /* Extra indices are zero for strong unforgeability */
   for(j = pos; j < OMEGA; ++j)
     if(hint[j]) return -1;
 
   /* Call random oracle and verify challenge */
-  shake256_init(&state);
-  shake256_absorb(&state, mu, CRHBYTES);
-  shake256_absorb(&state, buf.coeffs, K*POLYW1_PACKEDBYTES);
-  shake256_finalize(&state);
-  shake256_squeeze(buf.coeffs, SEEDBYTES, &state);
+  shake256_inc_init(&state);
+  shake256_inc_absorb(&state, mu, CRHBYTES);
+  shake256_inc_absorb(&state, buf.coeffs, K*POLYW1_PACKEDBYTES);
+  shake256_inc_finalize(&state);
+  shake256_inc_squeeze(buf.coeffs, SEEDBYTES, &state);
+  shake256_inc_ctx_release(&state);
   for(i = 0; i < SEEDBYTES; ++i)
     if(buf.coeffs[i] != sig[i])
       return -1;
diff --git a/avx2/polyvec.c b/avx2/polyvec.c
index 1d9c2e70..5ce1d887 100644
--- a/avx2/polyvec.c
+++ b/avx2/polyvec.c
@@ -25,16 +25,17 @@ void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
   uint64_t nonce;
   aes256ctr_ctx state;
 
-  aes256ctr_init(&state, rho, 0);
+  aes256ctr_init_u64(&state, rho, 0);
 
   for(i = 0; i < K; i++) {
     for(j = 0; j < L; j++) {
       nonce = (i << 8) + j;
-      state.n = _mm_loadl_epi64((__m128i *)&nonce);
+      aes256ctr_init_iv_u64(&state, nonce);
       poly_uniform_preinit(&mat[i].vec[j], &state);
       poly_nttunpack(&mat[i].vec[j]);
     }
   }
+  aes256_ctx_release(&state);
 }
 
 #elif K == 4 && L == 4
diff --git a/avx2/symmetric.h b/avx2/symmetric.h
index 7eb6f98..ed476d1 100644
--- a/avx2/symmetric.h
+++ b/avx2/symmetric.h
@@ -15,31 +15,35 @@ typedef aes256ctr_ctx stream256_state;
 #define STREAM128_BLOCKBYTES AES256CTR_BLOCKBYTES
 #define STREAM256_BLOCKBYTES AES256CTR_BLOCKBYTES
 
-#define stream128_init(STATE, SEED, NONCE) aes256ctr_init(STATE, SEED, NONCE)
+#define stream128_init(STATE, SEED, NONCE) aes256ctr_init_u64(STATE, SEED, NONCE) 
 #define stream128_squeezeblocks(OUT, OUTBLOCKS, STATE) aes256ctr_squeezeblocks(OUT, OUTBLOCKS, STATE)
-#define stream256_init(STATE, SEED, NONCE) aes256ctr_init(STATE, SEED, NONCE)
+#define stream128_release(STATE) aes256_ctx_release(STATE)
+#define stream256_init(STATE, SEED, NONCE) aes256ctr_init_u64(STATE, SEED, NONCE)
 #define stream256_squeezeblocks(OUT, OUTBLOCKS, STATE) aes256ctr_squeezeblocks(OUT, OUTBLOCKS, STATE)
+#define stream256_release(STATE) aes256_ctx_release(STATE)
 
 #else
 
 #include "fips202.h"
 
-typedef keccak_state stream128_state;
-typedef keccak_state stream256_state;
+typedef shake128incctx stream128_state;
+typedef shake256incctx stream256_state;
 
 #define dilithium_shake128_stream_init DILITHIUM_NAMESPACE(dilithium_shake128_stream_init)
-void dilithium_shake128_stream_init(keccak_state *state, const uint8_t seed[SEEDBYTES], uint16_t nonce);
+void dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce);
 
 #define dilithium_shake256_stream_init DILITHIUM_NAMESPACE(dilithium_shake256_stream_init)
-void dilithium_shake256_stream_init(keccak_state *state, const uint8_t seed[CRHBYTES], uint16_t nonce);
+void dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce);
 
 #define STREAM128_BLOCKBYTES SHAKE128_RATE
 #define STREAM256_BLOCKBYTES SHAKE256_RATE
 
 #define stream128_init(STATE, SEED, NONCE) dilithium_shake128_stream_init(STATE, SEED, NONCE)
 #define stream128_squeezeblocks(OUT, OUTBLOCKS, STATE) shake128_squeezeblocks(OUT, OUTBLOCKS, STATE)
+#define stream128_release(STATE) shake128_inc_ctx_release(STATE)
 #define stream256_init(STATE, SEED, NONCE) dilithium_shake256_stream_init(STATE, SEED, NONCE)
 #define stream256_squeezeblocks(OUT, OUTBLOCKS, STATE) shake256_squeezeblocks(OUT, OUTBLOCKS, STATE)
+#define stream256_release(STATE) shake256_inc_ctx_release(STATE)
 
 #endif
 
