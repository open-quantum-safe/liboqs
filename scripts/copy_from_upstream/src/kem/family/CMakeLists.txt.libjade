
{%- if common_deps is defined %}
    {%- for common_dep in common_deps %}

if({% for used_by in common_deps_usedby[common_dep['name']] -%}OQS_ENABLE_KEM_LIBJADE_{{ family }}_{{ used_by['scheme_c'] }}{%- if used_by['impl_name'] != default_implementation %}_{{ used_by['impl_name'] }}{% endif -%}{%- if not loop.last %} OR {% endif -%}{%- endfor -%})
    add_library({{ family }}_{{ common_dep['name'] }} OBJECT {% for source_file in common_dep['sources_addl']|sort -%}{{ upstream_location }}_{{ common_dep['name'] }}/{{ source_file }}{%- if not loop.last %} {% endif -%}{%- endfor -%})
    target_include_directories({{ family }}_{{ common_dep['name'] }} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/{{ upstream_location }}_{{ common_dep['name'] }})
        {%- if common_dep['required_flags'] %}
    target_compile_options({{ family }}_{{ common_dep['name'] }} PRIVATE {%- for flag in common_dep['required_flags'] %}{%- if flag != 'arm_neon' %} -m{%- if flag == 'bmi1' -%} bmi {%- elif flag == 'sse4_1' -%} sse4.1 {%- elif flag == 'pclmulqdq' -%} pclmul {%- else -%}{{ flag }}{%- endif -%}{%- endif -%}{%- endfor -%})
        {%- endif %}
        {%- if common_dep['compile_opts'] %}
    target_compile_options({{ family }}_{{ common_dep['name'] }} PUBLIC {{ common_dep['compile_opts'] }})
        {%- endif %}
    set(_{{ family|upper }}_OBJS ${_{{ family|upper }}_OBJS} $<TARGET_OBJECTS:{{ family }}_{{ common_dep['name'] }}>)
endif()

    {%- endfor %}
{%- endif %}

{%- for scheme in schemes -%}
    {%- for impl in scheme['metadata']['implementations'] -%}
        {%- if impl['name'] == scheme['default_implementation'] %}

if(OQS_ENABLE_KEM_LIBJADE_{{ family }}_{{ scheme['scheme_c'] }})
    add_library({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} OBJECT kem_{{ family }}_{{ scheme['scheme'] }}.c {% for source_file in impl['sources']|sort -%}{{ impl['upstream']['name'] }}_{{ scheme['pqclean_scheme'] }}_{{ impl['name'].replace('/', '_') }}/{{ source_file }}{%- if not loop.last %} {% endif -%}{%- endfor -%})
           {%- if impl['compile_opts'] %}
    target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PUBLIC {{ impl['compile_opts'] }})
           {%- endif -%}

        {%- else %}

if(OQS_ENABLE_KEM_LIBJADE_{{ family }}_{{ scheme['scheme_c'] }}_{{ impl['name'].replace('/', '_') }})
    add_library({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} OBJECT {% for source_file in impl['sources']|sort -%}{{ impl['upstream']['name'] }}_{{ scheme['pqclean_scheme'] }}_{{ impl['name'].replace('/', '_') }}/{{ source_file }}{%- if not loop.last %} {% endif -%}{%- endfor -%})
        {%- endif %}
    target_include_directories({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/{{ impl['upstream']['name'] }}_{{ scheme['pqclean_scheme'] }}_{{ impl['name'].replace('/', '_') }}/include)
    target_include_directories({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE ${PROJECT_SOURCE_DIR}/src/common/libjade_shims)
        {%- if impl['name'].replace('/', '_') != scheme['default_implementation'] and impl['required_flags'] -%}
           {%- set opts %}{% for flag in impl['required_flags'] %}{%- if flag != 'arm_neon' %} -m{%- if flag == 'bmi1' -%} bmi {% elif flag == 'sse4_1' -%} sse4.1 {% elif flag == 'pclmulqdq' -%} pclmul {% else -%}{{ flag }} {% endif %}{% endif -%}{% endfor %}{% endset %}
           {%- if opts|length > 0 %}
    target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE {{ opts }})
           {%- endif -%}
        {%- endif %}
        {%- if impl['compile_opts'] %}
    target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PUBLIC {{ impl['compile_opts'] }})
        {%- endif %}
        {%- if family == 'classic_mceliece' and impl['name'].replace('/', '_') == 'avx2' %}
    target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE -Wno-language-extension-token -O1)
        {%- endif %}
        {%- if family == 'hqc' and impl['name'].replace('/', '_') == 'avx2' %}
    target_compile_options({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE -Wno-missing-braces)
        {%- endif %}
        {%- if impl['upstream']['name'] == 'pqclean' %}
    if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        target_compile_definitions({{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }} PRIVATE old_gas_syntax)
    endif()
    	{%- endif %}
    set(_{{ family|upper }}_OBJS ${_{{ family|upper }}_OBJS} $<TARGET_OBJECTS:{{ family }}_{{ scheme['scheme'] }}_{{ impl['name'].replace('/', '_') }}>)
endif()
    {%- endfor -%}
{%- endfor %}

