{
   Rejection sampling for short secret (f,g) that can be completed to full basis
   Memcheck:Cond
   fun:poly_small_mkgauss
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for small (f,g) coefficients
   Memcheck:Cond
   src:keygen.c:4151 # fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for small (f,g) coefficients
   Memcheck:Cond
   src:keygen.c:4152 # fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for small (f,g) coefficients
   Memcheck:Cond
   src:keygen.c:4157 # fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for small (f,g) norm
   Memcheck:Cond
   src:keygen.c:4171 # fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for orthogonalized vector norm
   Memcheck:Cond
   src:keygen.c:4199 # fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for invertible f
   Memcheck:Cond
   src:vrfy.c:694 # fun:PQCLEAN_FALCON*_*_compute_public
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for basis completion (zint_bezout)
   Memcheck:Cond
   src:keygen.c:2713 # fun:solve_NTRU_deepest
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for basis completion (zint_mul_small Fp)
   Memcheck:Cond
   src:keygen.c:2725 # fun:solve_NTRU_deepest
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Rejection sampling for basis completion (zint_mul_small Gp)
   Memcheck:Cond
   src:keygen.c:2726 # fun:solve_NTRU_deepest
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Keygen is restarted on floating point exception
   Memcheck:Cond
   src:keygen.c:3195 # fun:solve_NTRU_intermediate
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Keygen is restarted on floating point exception
   Memcheck:Cond
   src:keygen.c:3196 # fun:solve_NTRU_intermediate
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Keygen is restarted on floating point exception
   Memcheck:Cond
   src:keygen.c:3623 # fun:solve_NTRU_binary_depth1
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Keygen is restarted if (F,G) cannot be packed to small integers
   Memcheck:Cond
   src:keygen.c:2066 # fun:poly_big_to_small
   fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Keygen is restarted if f*G - g*F != 12289 mod a small prime
   Memcheck:Cond
   src:keygen.c:4023 # fun:solve_NTRU
   fun:PQCLEAN_FALCON*_*_keygen
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Exception while encoding secret key (keygen fails and key is unused)
   Memcheck:Cond
   fun:PQCLEAN_FALCON*_*_trim_i8_encode
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
{
   Exception while encoding public key (keygen fails and key is unused)
   Memcheck:Cond
   fun:PQCLEAN_FALCON*_*_modq_encode
   fun:PQCLEAN_FALCON*_*_crypto_sign_keypair
}
