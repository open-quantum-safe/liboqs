{
   Rejection sampling for uniformly distributed public A matrix
   Memcheck:Cond
   fun:rej_uniform
   fun:PQCLEAN_DILITHIUM*_AARCH64_poly_uniformx2
   fun:PQCLEAN_DILITHIUM*_AARCH64_polyvec_matrix_expand
}
{
   Rejection sampling for s1 and s2
   Memcheck:Cond
   fun:rej_eta
   fun:PQCLEAN_DILITHIUM*_AARCH64_poly_uniform_eta
   fun:PQCLEAN_DILITHIUM*_AARCH64_polyvec*_uniform_eta
   fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_keypair
}
{
   Rejection sampling for challenge
   Memcheck:Cond
   fun:PQCLEAN_DILITHIUM*_AARCH64_poly_challenge
   fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_signature
}
{
   Rejection sampling for challenge
   Memcheck:Value8
   fun:PQCLEAN_DILITHIUM*_AARCH64_poly_challenge
   fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_signature
}
{
   Rejection sampling for signature distribution
   Memcheck:Cond
   ...
   src:sign.c:153 # Call to polyvecl_chknorm
   # fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_signature
}
{
   Rejection sampling for signature distribution
   Memcheck:Cond
   ...
   src:sign.c:163 # Call to polyveck_chknorm
   # fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_signature
}
{
   Hint does not need to be computed in constant time
   Memcheck:Cond
   ...
   src:sign.c:176 # Call to polyveck_make_hint
   # fun:PQCLEAN_DILITHIUM*_AARCH64_crypto_sign_signature
}
